import java.util.*;

public class test1 {
	public static void main(String[] args) {
		List<String> c = new ArrayList<>();
		c.add("green");
		c.add("red");
		c.add("blue");
		c.add("yellow");
		c.add("pink");

		List<Integer> x = new ArrayList<>();
		x.add(100);
		x.add(200);
		x.add(300);
		x.add(400);
		x.add(500);

		List<Integer> y = new ArrayList<>();
		y.add(100);
		y.add(200);
		y.add(300);
		y.add(400);
		y.add(500);
		
		List<String> q = new ArrayList<>();
		q.add("green");
		q.add("red");
		q.add("blue");
		q.add("yellow");
		q.add("pink");

		for (String s : closestStraightCity(c, x, y, q)) {
			System.out.println(s + " ");
		}

	}

	public static List<String> closestStraightCity(List<String> c, List<Integer> x, List<Integer> y, List<String> q) {
		// Write your code here
		List<city> city_list = new ArrayList<>();

		for (int i = 0; i < c.size(); i++) {
			String name = c.get(i);
			int x_coord = x.get(i);
			int y_coord = y.get(i);

			city_list.add(new city(name, x_coord, y_coord));
		}

		List<city> query_city = new ArrayList<>();
		List<String> answer = new ArrayList<>();
		fill_in_query_city(q, query_city, city_list);

		for (city cur_city : query_city) {
			int cur_x = cur_city.x;
			int cur_y = cur_city.y;
			
			city_list.sort(new Comparator<city>() {

				@Override
				public int compare(city o1, city o2) {
					// TODO Auto-generated method stub
					if(o1.x < o2.x)
						return -1;
					else if(o1.x == o2.x)
						return 0;
					else
						return 1;
				}
				
			});
			
			int left = lower_bound(cur_x, city_list);
			int right = upper_bound(cur_x,city_list);
			
			String city_name = null;
			int min_dist = Integer.MAX_VALUE;
			for(int i = left ; i < right ; i++) {
				city other_city = city_list.get(i);
				
				if(!other_city.name.equals(cur_city.name)) {
					int dist = Math.abs(cur_city.x - other_city.x) + Math.abs(cur_city.y - other_city.y);
					
					if(min_dist > dist) {
						min_dist = dist;
						city_name= other_city.name;
					}else if(min_dist == dist) {
						if(city_name.compareToIgnoreCase(other_city.name) > 0) {
							city_name= other_city.name;
						}
					}
					
				}
			}
			
			city_list.sort(new Comparator<city>() {

				@Override
				public int compare(city o1, city o2) {
					// TODO Auto-generated method stub
					if(o1.y < o2.y)
						return -1;
					else if(o1.y == o2.y)
						return 0;
					else
						return 1;
				}
				
			});
			
			left = lower_bound(cur_y, city_list);
			right = upper_bound(cur_y,city_list);
			
			for(int i = left ; i < right ; i++) {
				city other_city = city_list.get(i);
				
				if(!other_city.name.equals(cur_city.name)) {
					int dist = Math.abs(cur_city.x - other_city.x) + Math.abs(cur_city.y - other_city.y);
					
					if(min_dist > dist) {
						min_dist = dist;
						city_name= other_city.name;
					}else if(min_dist == dist) {
						if(city_name.compareToIgnoreCase(other_city.name) > 0) {
							city_name= other_city.name;
						}
					}
					
				}
			}

			if(city_name == null) {
				answer.add("NONE");
				continue;
			}
			
			answer.add(city_name);
		}

		return answer;

	}

	private static void fill_in_query_city(List<String> q, List<city> query_city, List<city> city_list) {
		for (String qc : q) {
			for (int i = 0; i < city_list.size(); i++) {
				if (city_list.get(i).name.equals(qc)) {
					int x = city_list.get(i).x;
					int y = city_list.get(i).y;
					query_city.add(new city(qc, x, y));
				}
			}
		}
	}
	
	private static int lower_bound(int target, List<city> city_list) {
		int left =0;
		int right = city_list.size();
		
		while(left < right) {
			int mid = (right+ left) /2;
			
			if(target < city_list.get(mid).x)
				left = mid + 1;
			else
				right = mid;
		}
		
		
		return left;
	}
	
	private static int upper_bound(int target, List<city> city_list) {
		int left =0;
		int right = city_list.size();
		
		while(left < right) {
			int mid = (right+ left) /2;
			
			if(target <= city_list.get(mid).x)
				left = mid + 1;
			else
				right = mid;
		}
		
		
		return left;
	}

	private static class city {
		String name;
		int x, y, distance;

		public city(String n, int dist) {
			this.name = n;
			this.distance = dist;
		}

		public city(String n, int x, int y) {
			this.name = n;
			this.x = x;
			this.y = y;
		}
	}
}
