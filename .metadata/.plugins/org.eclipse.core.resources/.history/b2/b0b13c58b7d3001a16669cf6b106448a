import java.util.*;

public class test1 {
	public static void main(String[] args) {
		List<String> c = new ArrayList<>();
		c.add("fastcity");
		c.add("bigbanana");
		c.add("xyz");
		
		List<Integer> x= new ArrayList<>();
		x.add(23);
		x.add(23);
		x.add(230);
		
		List<Integer> y=  new ArrayList<>();
		y.add(1);
		y.add(10);
		y.add(20);
		
		List<String> q=  new ArrayList<>();
		q.add("fastcity");
		q.add("bigbanana");
		q.add("xyz");
		
		
		for(String s : closestStraightCity(c,x,y,q)) {
			System.out.println(s + " ");
		}
		
	}

	public static List<String> closestStraightCity(List<String> c, List<Integer> x, List<Integer> y, List<String> q) {
        // Write your code here
        List<city> city_list = new ArrayList<>();

        for (int i = 0; i < c.size(); i++) {
            String name = c.get(i);
            int x_coord = x.get(i);
            int y_coord = y.get(i);

            city_list.add(new city(name, x_coord, y_coord));
        }

        List<city> query_city = new ArrayList<>();
        List<String> answer = new ArrayList<>();
        fill_in_query_city(q, query_city, city_list);

        for(city cur_city : query_city){

            List<city> temp = new ArrayList<>();
            for(int i =0 ; i < city_list.size() ; i++){
                city other_city = city_list.get(i);
                if(!cur_city.name.equals(other_city.name)){
                if(cur_city.x == other_city.x || cur_city.y == other_city.y){
                    int dist=  Math.abs(cur_city.x - other_city.x) + Math.abs(cur_city.y - other_city.y);

                    temp.add(new city(other_city.name,dist));
                }
                }

                if(temp.isEmpty()){
                    answer.add("NONE");
                    continue;
                }

                temp.sort(new Comparator<city>(){
                    @Override
                    public int compare(city arg0, city arg1){
                        if(arg0.distance < arg1.distance)
                        return -1;
                        else if(arg0.distance == arg1.distance){
                            if(arg0.name.compareToIgnoreCase(arg1.name) < 0)
                            return -1;
                            else 
                            return 1;
                        }else
                        return 1;
                    }
                });

                answer.add(temp.get(0).name);
            }
        }
        return answer;
    }

    private static void fill_in_query_city(List<String> q, List<city> query_city, List<city> city_list){
        for(String qc : q){
            for(int i =0 ; i < city_list.size() ; i++){
                if(city_list.get(i).name.equals(qc)){
                    int x= city_list.get(i).x;
                    int y = city_list.get(i).y;
                    query_city.add(new city(qc,x,y));
                }
            }
        }
    }
	private static class city {
		String name;
		int x, y, distance;

		public city(String n, int dist) {
			this.name = n;
			this.distance = dist;
		}

		public city(String n, int x, int y) {
			this.name = n;
			this.x = x;
			this.y = y;
		}
	}
}
