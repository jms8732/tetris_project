package genetic_tetris;

import java.util.*;

public class calculate_gene {
	private int[][] board;
	private int[] ud = { -1, 0, 1, 0 };
	private int[] rl = { 0, 1, 0, -1 };

	public double calculate(List<Point> tmp, int n, int[][] board, Weight w) {
		this.board = board;

		// 현재 블럭으로 채우기
		for (Point p : tmp) {
			board[p.x][p.y] = n;
		}

		boolean[][] visited = new boolean[20][10];

		int bc = blank_count(tmp);
		int cl = complete_line();
		int rb = round_block(tmp);
		int h = cal_height(tmp);
		int d_blank = down_blank(tmp);
		int sb = side_block(tmp);
		int bb = below_block(tmp);

		int hc = hole_count(tmp, visited);
		int ub = up_block(visited);

		/*
		 * System.out.println("blank count : " + bc);
		 * System.out.println("complete line : " + cl);
		 * System.out.println("round block : " + rb); System.out.println("height : " +
		 * h); System.out.println("down blank : " + d_blank);
		 * System.out.println("side block : " + sb); System.out.println("below block : "
		 * + bb); System.out.println("hole count : " + hc);
		 * System.out.println("up block : " + ub);
		 * System.out.println("result : " + result + "\n");
		 */
		double result = cal_result(bc, cl, rb, h, d_blank, sb, bb, hc, ub, w);
		
		return Math.abs((Math.round((result/8)*1000.0)/1000.0) );
	}

	private double cal_result(int bc, int cl, int rb, int h, int d_blank, int sb, int bb, int hc, int ub, Weight w) {
		double result = -bc * w.blank_weight;
		result += cl * w.complete_line_weight;
		result += rb * w.round_block_weight;
		result += h * w.height_weight;
		result -= d_blank * w.down_blank_weight;
		result += sb * w.side_block_weight;
		result += bb * w.baseline_weight;
		result -= hc * w.hole_weight;
		result -= ub * w.up_block_weight;

		return result;
	}

	private int up_block(boolean[][] visited) {
		int ret = 0;

		for (int i = 0; i < 10; i++) {
			inner: for (int j = 0; j < 20; j++) {
				if (!visited[j][i]) {
					int h = j;

					for (int k = h-1; k >= 0; k--) {
						if (board[k][i] != 0)
							ret++;
						else
							break inner;
					}
				}
			}
		}

		return ret;
	}

	private int hole_count(List<Point> tmp, boolean[][] visited) {
		for (int i = 0; i < 20; i++) {
			for (int j = 0; j < 10; j++) {
				if (board[i][j] != 0)
					visited[i][j] = true;
			}
		}

		bfs(visited, 0, 4);

		int ret = 0;

		for (int i = 0; i < 20; i++) {
			for (int j = 0; j < 10; j++) {
				if (!visited[i][j])
					ret++;
			}
		}

		return ret;
	}

	private void bfs(boolean[][] visited, int x, int y) {
		Queue<Point> q = new LinkedList<>();
		q.add(new Point(x, y));
		visited[x][y] = true;

		while (!q.isEmpty()) {
			Point cur = q.poll();

			for (int i = 0; i < 4; i++) {
				int nx = cur.x + ud[i];
				int ny = cur.y + rl[i];

				if (nx < 0 || nx >= 20 || ny < 0 || ny >= 10 || visited[nx][ny])
					continue;

				visited[nx][ny] = true;
				q.add(new Point(nx, ny));
			}
		}

	}

	// 아래 접하는 블럭
	private int below_block(List<Point> tmp) {
		boolean[][] visited = new boolean[20][10];
		for (Point p : tmp) {
			visited[p.x][p.y] = true;
		}

		int ret = 0;

		for (Point p : tmp) {
			int nx = p.x + 1;
			int ny = p.y;

			if (nx < 0 || nx >= 20 || ny < 0 || ny >= 10) {
				ret++;
				continue;
			}

			if (!visited[nx][ny] && board[nx][ny] != 0)
				ret++;
		}

		return ret;
	}

	private int side_block(List<Point> tmp) {

		boolean[][] visited = new boolean[20][10];
		for (Point p : tmp) {
			visited[p.x][p.y] = true;
		}

		int ret = 0;
		for (Point p : tmp) {
			for (int i = 0; i < 4; i++) {
				if (i % 2 != 0) {
					int nx = p.x + ud[i];
					int ny = p.y + rl[i];

					if (nx < 0 || nx >= 20 || ny < 0 || ny >= 10) {
						ret++;
						continue;
					}

					if (!visited[nx][ny] && board[nx][ny] != 0)
						ret++;
				}
			}
		}

		return ret;
	}

	private int down_blank(List<Point> tmp) {
		int ret = 0;
		for (Point p : tmp) {
			int curX = p.x;
			while (true) {
				int nx = curX + 1;
				int ny = p.y;
				if (nx < 0 || nx >= 20 || ny < 0 || ny >= 10 || board[nx][ny] != 0)
					break;
				ret++;
				curX = nx;
			}
		}

		return ret;
	}

	private int cal_height(List<Point> tmp) {
		int height = Integer.MAX_VALUE;

		for (Point p : tmp) {
			height = Math.min(height, p.x);
		}

		return height;
	}

	private int round_block(List<Point> tmp) {
		boolean[][] visited = new boolean[20][10];

		for (Point p : tmp) {
			visited[p.x][p.y] = true;
		}

		int ret = 0;
		for (Point p : tmp) {
			for (int i = 0; i < 4; i++) {
				int nx = p.x + ud[i];
				int ny = p.y + rl[i];

				if (nx < 0 || nx >= 20 || ny < 0 || ny >= 10 || visited[nx][ny] || board[nx][ny] == 0)
					continue;

				visited[nx][ny] = true;
				ret++;
			}
		}

		return ret;
	}

	private int complete_line() {
		int ret = 0;
		for (int i = 0; i < 20; i++) {
			int count = 0;
			for (int j = 0; j < 10; j++) {
				if (board[i][j] != 0)
					count++;
			}

			if (count == 10)
				ret++;
		}

		return ret;
	}

	private int blank_count(List<Point> tmp) {
		boolean[][] visited = new boolean[20][10];
		for (Point p : tmp) {
			visited[p.x][p.y] = true;
		}

		int ret = 0;
		for (Point p : tmp) {
			for (int i = 0; i < 4; i++) {
				int nx = p.x + ud[i];
				int ny = p.y + rl[i];

				if (nx < 0 || nx >= 20 || ny < 0 || ny >= 10 || visited[nx][ny] || board[nx][ny] != 0)
					continue;

				visited[nx][ny] = true;
				ret++;
			}
		}

		return ret;
	}
}
