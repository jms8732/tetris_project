package genetic_tetris;

import java.util.*;

public class Generic {
	private Weight[] w;
	private int size;

	public Generic(int count) {
		this.size = count;
		w = new Weight[this.size];

		double[] temp = new double[9];
		for (int i = 0; i < w.length; i++) {
			for (int j = 0; j < temp.length; j++) {
				temp[j] = Math.random() * 2 * 5 - 5;
			}

			w[i] = new Weight(i + 1, 0, 0, temp);
		}
	}

	public Weight[] get_weight() {
		return w;

	}

	private void selection(List<Weight> list) {
		for (int i = 0; i < this.size; i++) {
			list.add(w[i]);
		}

		list.sort(new Comparator<Weight>() {

			@Override
			public int compare(Weight o1, Weight o2) {
				// TODO Auto-generated method stub
				if (o1.line > o2.line)
					return -1;
				else if (o1.line == o2.line) {
					if (o1.score > o2.score)
						return -1;
					else if (o1.score == o2.score)
						return 0;
					else
						return 1;
				} else
					return 1;
			}

		});

	}

	public void cross_over() {
		List<Weight> list = new ArrayList<>();
		selection(list);

		Weight[] children = new Weight[this.size];

		// 상위 50% 부모 개체에서 자식 개체에게 전달
		int s = (this.size / 2) % 2 == 0 ? this.size / 2 : (this.size / 2) - (this.size % 2);
		boolean[] check = new boolean[s];

		Random rn = new Random();

		int idx = 0;
		for (int i = 0; i < (this.size % 2); i++) {
			children[idx++] = new Weight(i + 1, 0, 0, list.get(i).variation);
		}

		while (!finish(check)) {
			Weight p1 = list.get(get_idx(check, s));
			Weight p2 = list.get(get_idx(check, s));

			idx = cross_over_1(p1, p2, children, idx);
		}

		// 가장 좋은 개체로 돌연 변이
		double mutation = make_mutation(list.get(0));
		print(list.get(0));
		System.out.println("Mutation : " + mutation);

		// 염색체의 5%만 변이
		int mutation_size = (int) Math.round(this.size * 0.25);
		check = new boolean[this.size];

		for (int i = 0; i < mutation_size; i++) {
			int temp = rn.nextInt(this.size);
			adjust_mutation(w[temp], mutation);
		}

		System.out.println("Complete generation\n");
	}

	private boolean finish(boolean[] check) {
		for (int i = 0; i < check.length; i++)
			if (!check[i])
				return false;

		return true;
	}

	private void print(Weight w) {
		System.out.println("MOM Gene : #" + w.number + " | Score : " + w.score + " | line : " + w.line);
		System.out.println("Blank Weight : " + w.variation[0] + " | Complete Weight : " + w.variation[1]);
		System.out.println("Round Block Weight : " + w.variation[2] + " | Height Weight : " + w.variation[3]);
		System.out.println("Down Block Weight : " + w.variation[4] + " | Side Block Weight : " + w.variation[5]);
		System.out.println("Base line Weight : " + w.variation[6] + " | Hole Weight : " + w.variation[7]);
		System.out.println("Up Block Weight : " + w.variation[8]);

	}

	private int get_idx(boolean[] check, int size) {
		Random rn = new Random();
		while (true) {
			int idx = rn.nextInt(size);

			if (!check[idx]) {
				check[idx] = true;
				return idx;
			}
		}
	}

	private void adjust_mutation(Weight w, double mutation) {
		Random rn = new Random();
		int idx1 = rn.nextInt(9);
		int idx2 = rn.nextInt(9);

		int big = Math.max(idx1, idx2);
		int small = Math.min(idx1, idx2);

		for (int i = small; i <= big; i++) {
			w.variation[i] += (2 * mutation - mutation);
		}
	}

	private double make_mutation(Weight p1) {
		double result = 0.0;

		for (int i = 0; i < p1.variation.length; i++) {
			result += Math.abs(p1.variation[i]);
		}

		return Math.round((result / 20) * 1000.0) / 1000.0;
	}

	private int cross_over_1(Weight p1, Weight p2, Weight[] children, int idx) {
		double[] p1_var = new double[p1.variation.length];
		System.arraycopy(p1.variation, 0, p1_var, 0, p1_var.length);
		double[] p2_var = new double[p2.variation.length];
		System.arraycopy(p2.variation, 0, p2_var, 0, p2_var.length);

		int small = 0;
		int big = 4;

		for (int i = small; i < big; i++) {
			swap(i, p1.variation, p2.variation);
		}

		for (int i = big; i < p1_var.length; i++) {
			swap(i, p1_var, p2_var);
		}

		children[idx++] = new Weight(idx, 0, 0, p1.variation);
		children[idx++] = new Weight(idx, 0, 0, p2.variation);
		children[idx++] = new Weight(idx, 0, 0, p1_var);
		children[idx++] = new Weight(idx, 0, 0, p2_var);

		return idx;
	}

	private void swap(int idx, double[] p1, double[] p2) {
		double temp_p1 = p1[idx];
		p1[idx] = p2[idx];
		p2[idx] = temp_p1;
	}
}
