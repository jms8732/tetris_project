package genetic_tetris;

import java.util.*;
import java.io.*;

/*
 * 664มู : 7.729 4.579 3.201 2.851 8.467 3.576 10.293 1.159 -0.305 
 */

public class Generic {
	private Weight[] w;
	private int size;

	public Generic(int count) {
		this.size = count;
		w = new Weight[this.size];

		double[] temp = new double[9];
		for (int i = 0; i < w.length; i++) {
			for (int j = 0; j < temp.length; j++) {
				temp[j] = Math.random() * 10 - 5;
			}

			w[i] = new Weight(i + 1, 0, 0, temp);
		}
	}

	public Weight[] get_weight() {
		return w;

	}

	public void cross_over() {
		int avr= 0;
		for (int i = 0; i < w.length; i++) {
			if()
			avr += w[i].line;
		}

		avr /= w.length;

		List<Weight> temp = new ArrayList<>();
		for (int i = 0; i < w.length; i++) {
			if (w[i].line >= avr) {
				temp.add(new Weight(i, 0, 0, w[i].variation));
			}
		}

		List<Weight> temp_children =new ArrayList<>();
		int start =0;
		if (temp.size() % 2 != 0) {
			temp.sort(new Comparator<Weight>() {

				@Override
				public int compare(Weight arg0, Weight arg1) {
					// TODO Auto-generated method stub
					if (arg0.line > arg1.line)
						return -1;
					else
						return 1;
				}

			});

			temp_children.add(new Weight(start,0,0,temp.get(0).variation));
			start = 1;
		}
		
		
		
		for(int i = start ; i < temp.size() ; i++) {
			for(int j = i + 1; j < temp.size() ; j++) {
				cross_over(temp.get(i), temp.get(j), temp_children);
			}
		}
		
		for(int i = start ; i < temp.size() ; i++) {
			temp_children.add(new Weight(0,0,0,temp.get(i).variation));
		}
		
		Weight[] children = new Weight[this.size];
		if(temp_children.size() == this.size) {
			for(int i =0 ; i < temp_children.size(); i++) {
				temp_children.get(i).number = i+1;
				children[i] = temp_children.get(i);
			}
			
			create_mutation(children);
			
		}else {
			create_mutation(temp_children);
			
			for(int i =0 ; i < temp_children.size(); i++) {
				temp_children.get(i).number = i+1;
				children[i] = temp_children.get(i);
			}
		}
		
		w = children;
		System.out.println("create generation");

	}
	
	private void create_mutation(Weight [] temp) {
		Random rn = new Random();
		boolean [] visited = new boolean[temp.length];
		int size = (int)(temp.length * 0.1);
		
		double mutation = Math.random() * (2*0.5) - 0.5;
		
		while(size != 0) {
			int idx = rn.nextInt(temp.length);
			if(!visited[idx]) {
				visited[idx] = true;
				size--;
				
				for(int i =0 ; i < 9 ;i++) {
					temp[idx].variation[i] += mutation;
				}
			}
		}
	}
	
	private void create_mutation(List<Weight> temp) {
		Random rn = new Random();
		int size = temp.size();
		while(temp.size() != this.size) {
			int idx = rn.nextInt(size);
			
			double mutation = Math.random() * (2*0.5) - 0.5;
			
			Weight cur = new Weight(0,0,0,temp.get(idx).variation);
			
			for(int i =0 ; i < cur.variation.length ; i++) {
				cur.variation[i] += mutation;
			}
			
			temp.add(cur);
		}
	}
	
	private void cross_over(Weight p1, Weight p2 , List<Weight> children) {
		double [] temp = new double[9];
		double [] temp1 = new double[9];

		System.arraycopy(p1.variation, 0, temp, 0, 4);
		System.arraycopy(p2.variation, 4, temp, 4, 5);
		
		System.arraycopy(p1.variation, 4, temp1, 4, 5);
		System.arraycopy(p2.variation, 0, temp1, 0, 4);
		
		children.add(new Weight(0,0,0,temp));
		children.add(new Weight(0,0,0,temp1));
	}

	private void write(Weight w) {
		File f = new File("C:\\Users\\jms87\\Desktop\\tetris_project\\output_2.txt");
		try {
			FileWriter fw = new FileWriter(f, true);
			fw.write(w.line + " ");
			for (int i = 0; i < w.variation.length; i++) {
				fw.write(w.variation[i] + " ");
			}
			fw.write("\n");
			fw.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void print(Weight w) {
		System.out.println("MOM Gene : #" + w.number + " | Score : " + w.score + " | line : " + w.line);
		System.out.println("Blank Weight : " + w.variation[0] + " | Complete Weight : " + w.variation[1]);
		System.out.println("Round Block Weight : " + w.variation[2] + " | Height Weight : " + w.variation[3]);
		System.out.println("Down Block Weight : " + w.variation[4] + " | Side Block Weight : " + w.variation[5]);
		System.out.println("Base line Weight : " + w.variation[6] + " | Hole Weight : " + w.variation[7]);
		System.out.println("Up Block Weight : " + w.variation[8]);

	}

}
