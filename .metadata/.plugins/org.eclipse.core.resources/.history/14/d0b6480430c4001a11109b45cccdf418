package toy_project;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.List;
import java.util.Random;

import javax.swing.JFrame;
import javax.swing.JPanel;

public class tetris_board extends JFrame {
	private MyPanel panel = new MyPanel();
	private int[][] board = new int[20][10];
	private static List<Point> block;

	public static void main(String[] args) {
		tetris_board board = new tetris_board();

		Random rand = new Random();
		int num = rand.nextInt(5);

		tetris_block b = new tetris_block();
		block = b.make_block(num);

	}

	public tetris_board() {
		setTitle("Tetris");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setSize(500, 700);
		setResizable(false);
		setContentPane(panel);
		setVisible(true);
	}

	// 선 그리는 것은 좌표로 계산, setSize 같은 경우는 픽셀 단위로 계산
	private class MyPanel extends JPanel {
		public MyPanel() {
			this.addKeyListener(new MyKeyListener());
			this.setFocusable(true);
			this.requestFocus();
		}
		
		public void paintComponent(Graphics g) {
			super.paintComponent(g);
			draw_board(g);
		}

		public void draw_board(Graphics g) {
			for (Point p : block) {
				g.setColor(Color.green);
				g.fillRect(p.x * 30, p.y * 30, 30, 30);
			}

			g.setColor(Color.black);
			for (int i = 1; i <= 10; i++) {
				g.drawLine(i * 30, 0, i * 30, 600);
			}

			for (int i = 1; i <= 20; i++) {
				g.drawLine(0, i * 30, 300, i * 30);
			}

		}

		public class MyKeyListener extends KeyAdapter {
			@Override
			public void keyPressed(KeyEvent arg0) {
				// TODO Auto-generated method stub
				if (arg0.getKeyCode() == KeyEvent.VK_DOWN) {
					System.out.println("DOWN");
					down();
				}
			}

			@Override
			public void keyReleased(KeyEvent arg0) {
				// TODO Auto-generated method stub
				super.keyReleased(arg0);
				for(Point p : block) {
					System.out.print(p.x + " " + p.y + " ");
				}
				revalidate();
			}

			@Override
			public void keyTyped(KeyEvent arg0) {
				// TODO Auto-generated method stub
				super.keyTyped(arg0);
			}

			private void down() {
				for (Point p : block) {
					p.x += 1;
				}
			}
		}
	}
}
