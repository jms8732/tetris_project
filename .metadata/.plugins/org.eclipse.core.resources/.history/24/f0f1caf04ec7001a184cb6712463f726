package genetic_tetris;

import java.util.*;

public class play_game {
	public static int removed_line = 0;
	private static int[][] board;
	private static int[] ud = { 1, 0, 0 };
	private static int[] rl = { 0, 1, -1 };

	public static void main(String[] args) {
		Random rn = new Random();

		int n = rn.nextInt(7);
		tetris_block block = new tetris_block();
		tetris_board tetris_board = new tetris_board();

		board = new int[20][10];		
		tetris_board.set_board(board);

		while (true) {
			try {
			//블록을 생성한다.
			List<Point> b = block.make_block(n);
			tetris_board.set_block(b);
			
			move(b);
			tetris_board.repaint();
			Thread.sleep(10000);
			}catch(Exception e) {
				e.printStackTrace();
			}
		}

	}

	private static void move(List<Point> b) {
		for(int i =0 ; i < 10 ; i++) {
			for(int j = 20 ; j >= 0 ; j--) {
				if(can_put(i,j,b)) {
					put_there(i,j,b);
					print();
				}
			}
		}
	}
	
	private static void print() {
		for(int i =0 ; i< 20 ; i++) {
			for(int j =0 ; j< 10 ; j++) {
				System.out.print(board[i][j] + " ");
			}
			System.out.println();
		}
	}
	
	//블록을 둔다.
	private static void put_there(int x ,int y, List<Point> b) {
		for(Point p : b) {
			p.x += x;
			p.y += y;
			
			board[p.y][p.x]= 1; 
		}
	}
	
	//블록을 해당 위치에서 둘 수 있는지 없는지 판단.
	private static boolean can_put(int x, int y,List<Point> b ) {
		for(Point p : b) {
			int nx = p.x + x;
			int ny = p.y + y;
			
			//현재 좌표에 배열 범위 밖인 경우
			if(nx <0 || nx >= 20 || ny < 0 || ny >= 10)
				return false;
			
			//블록을 둘 자리에 이미 블록이 존재한 경우
			if(board[nx][ny] == 1)
				return false;
		}
		
		return true;
	}
}
