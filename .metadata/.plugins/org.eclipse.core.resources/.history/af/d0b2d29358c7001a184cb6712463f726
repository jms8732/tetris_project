package genetic_tetris;

import java.util.*;

public class play_game {
	public static int removed_line = 0;
	private static int[][] board;
	private static int[] ud = { 1, 0, 0 };
	private static int[] rl = { 0, 1, -1 };

	public static void main(String[] args) {
		Random rn = new Random();

		tetris_block block = new tetris_block();
		tetris_board tetris_board = new tetris_board();

		board = new int[20][10];
		tetris_board.set_board(board);

		Generic g = new Generic(100); // 유전자 생성

		while (true) {

			int n = (rn.nextInt(7) + 1);
			System.out.println(n);
			try {
				// 블록을 생성한다.
				for (int i = 0; i < g.get_weight().length; i++) {
					List<Point> b = block.make_block(n);
					move(b, n);
					tetris_board.repaint();
					Thread.sleep(1000);
				}
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}

	}

	// 블록 두기
	private static void move(List<Point> b, int n) {
		outter: for (int i = -4; i < 6; i++) {
			for (int j = 19; j >= -1; j--) {
				if (can_put(j, i, b)) { // 블록을 둘 수 있을 경우

					put_there(j, i, b, n);
					print();
					break outter;
				}
			}
		}
	}

	private static void print() {
		for (int i = 0; i < 20; i++) {
			for (int j = 0; j < 10; j++) {
				System.out.print(board[i][j] + " ");
			}
			System.out.println();
		}
		System.out.println();
	}

	// 블록을 둔다.
	private static void put_there(int x, int y, List<Point> b, int n) {
		for (Point p : b) {
			p.x += x;
			p.y += y;

			board[p.x][p.y] = n;
		}
	}

	// 블록을 해당 위치에서 둘 수 있는지 없는지 판단.
	private static boolean can_put(int x, int y, List<Point> b) {
		for (Point p : b) {
			int nx = p.x + x;
			int ny = p.y + y;

			// 현재 좌표에 배열 범위 밖인 경우
			if (nx < 0 || nx >= 20 || ny < 0 || ny >= 10)
				return false;

			// 블록을 둘 자리에 이미 블록이 존재한 경우
			if (board[nx][ny] != 0)
				return false;
		}

		return true;
	}
}
